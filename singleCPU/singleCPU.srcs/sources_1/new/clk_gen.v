`timescale 1ns/1ps

module clk_gen(
		input		clk_pin,         // Input clock pin - IBUFGDS is in core
		input		rst_i,           // Asynchronous input from IBUF
		input		rst_clk_tx,      // For clock divider
		input		[15:0] pre_clk_tx,      // Current divider
	
		output		clk_rx,          // Receive clock
		output		clk_tx,          // Transmit clock
		output		clk_samp,        // Sample clock
		output		en_clk_samp,     // Enable for clk_samp
		output		clock_locked     // Locked signal from MMCM
	);

	/* Instantiate the prescale divider */
	clk_div clk_div_i0(
		.clk_tx          (clk_tx),
		.rst_clk_tx      (rst_clk_tx),
		.pre_clk_tx      (pre_clk_tx),
		.en_clk_samp     (en_clk_samp)
	);

	/* Instantiate clk_core - generated by the Clocking Wizard */

	clk_core clk_core_i0(
		/* Clock in ports */
	 	.clk_in1(clk_pin),      // input clk_in1
		/* Clock out ports */
		.clk_out1(clk_rx),     // output clk_out1
		.clk_out2(clk_tx),     // output clk_out2
		/* Status and control signals */
		.reset(rst_i), // input reset
		.locked(clock_locked)
	);      // output locked
	
	/* Insert Clock Core here */
	BUFHCE #(
		.INIT_OUT(0)  // Initial output value
	)//注意没有分号
	BUFHCE_clk_samp_i0(
		.O        (clk_samp),   // 1-bit The output of the BUFH
		.CE       (en_clk_samp),// 1-bit Enables propagation of signal from I to O
		.I        (clk_tx)      // 1-bit The input to the BUFH
	); // BUFHCE
	
	
endmodule